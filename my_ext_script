#!/bin/bash
#-------------------------------------------------------------------------------
#Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com
#Contribution: flexiondotorg
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# Run this script after your first boot with archlinux (as root)

if [[ -f `pwd`/sharedfuncs ]]; then
  source sharedfuncs
else
  echo "missing file: sharedfuncs"
  exit 1
fi

#ARCHLINUX U INSTALL {{{
#WELCOME {{{
welcome(){
  clear
  echo -e "${Bold}Welcome to the Archlinux U Install script by helmuthdu${White}"
  print_line
  echo "Requirements:"
  echo "-> Archlinux installation"
  echo "-> Run script as root user"
  echo "-> Working internet connection"
  print_line
  echo "Script can be cancelled at any time with CTRL+C"
  print_line
  echo "http://www.github.com/helmuthdu/aui"
  print_line
  echo -e "\nBackups:"
  print_line
  # backup old configs
  [[ ! -f /etc/pacman.conf.aui ]] && cp -v /etc/pacman.conf /etc/pacman.conf.aui || echo "/etc/pacman.conf.aui";
  [[ -f /etc/ssh/sshd_config.aui ]] && echo "/etc/ssh/sshd_conf.aui";
  [[ -f /etc/sudoers.aui ]] && echo "/etc/sudoers.aui";
  pause_function
  echo ""
}
#}}}
#SELECT/CREATE USER {{{
select_user(){
  #CREATE NEW USER {{{
  create_new_user(){
    read -p "Username: " username
    username=`echo $username | tr '[:upper:]' '[:lower:]'`
    useradd -m -g users -G wheel -s /bin/bash ${username}
    chfn ${username}
    passwd ${username}
    while [[ $? -ne 0 ]]; do
      passwd ${username}
    done
    pause_function
    configure_user_account
  }
  #}}}
  #CONFIGURE USER ACCOUNT {{{
  configure_user_account(){
    cp /etc/skel/.bashrc /home/${username}
    chown -R ${username}:users /home/${username}
  }
  #}}}
  print_title "SELECT/CREATE USER - https://wiki.archlinux.org/index.php/Users_and_Groups"
  users_list=(`cat /etc/passwd | grep "/home" | cut -d: -f1`);
  PS3="$prompt1"
  echo "Avaliable Users:"
  if [[ $(( ${#users_list[@]} )) -gt 0 ]]; then
    print_warning "WARNING: THE SELECTED USER MUST HAVE SUDO PRIVILEGES"
  else
    echo ""
  fi
  select OPT in "${users_list[@]}" "Create new user"; do
    echo "select user is $OPT."
	  pause_function
    if [[ $OPT == "Create new user" ]]; then
      create_new_user
    elif contains_element "$OPT" "${users_list[@]}"; then
      username=$OPT
    else
      invalid_option
    fi
    [[ -n $OPT ]] && break
  done
  [[ ! -f /home/${username}/.bashrc ]] && configure_user_account;
  ### 这里是配置代理的？如果设置了代理，则curl使用代理？
  if [[ -n "$http_proxy" ]]; then
      echo "proxy = $http_proxy" > /home/${username}/.curlrc
      chown ${username}:users /home/${username}/.curlrc
  fi
}
#}}}
#CONFIGURE SUDO {{{
configure_sudo(){
  if ! is_package_installed "sudo" ; then
    print_title "SUDO - https://wiki.archlinux.org/index.php/Sudo"
    package_install "sudo"
  fi
  #CONFIGURE SUDOERS {{{
  if [[ ! -f  /etc/sudoers.aui ]]; then
    cp -v /etc/sudoers /etc/sudoers.aui
    ## Uncomment to allow members of group wheel to execute any command
    sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers
    ## Same thing without a password (not secure)
    #sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^#//' /etc/sudoers

    #This config is especially helpful for those using terminal multiplexers like screen, tmux, or ratpoison, and those using sudo from scripts/cronjobs:
    echo "" >> /etc/sudoers
    echo 'Defaults !requiretty, !tty_tickets, !umask' >> /etc/sudoers
    echo 'Defaults visiblepw, path_info, insults, lecture=always' >> /etc/sudoers
    echo 'Defaults loglinelen=0, logfile =/var/log/sudo.log, log_year, log_host, syslog=auth' >> /etc/sudoers
    echo 'Defaults passwd_tries=3, passwd_timeout=1' >> /etc/sudoers
    echo 'Defaults env_reset, always_set_home, set_home, set_logname' >> /etc/sudoers
    echo 'Defaults !env_editor, editor="/usr/bin/vim:/usr/bin/vi:/usr/bin/nano"' >> /etc/sudoers
    echo 'Defaults timestamp_timeout=15' >> /etc/sudoers
    echo 'Defaults passprompt="[sudo] password for %u: "' >> /etc/sudoers
    echo 'Defaults lecture=never' >> /etc/sudoers
  fi
  #}}}
}
#}}}
#AUR HELPER {{{
choose_aurhelper(){
  print_title "AUR HELPER - https://wiki.archlinux.org/index.php/AUR_Helpers"
  print_info "AUR Helpers are written to make using the Arch User Repository more comfortable."
  print_warning "\tNone of these tools are officially supported by Arch devs."

  if ! is_package_installed "pacaur" ; then
     package_install "base-devel yajl expac"
     pacman -D --asdeps yajl expac
     add_key_user "hkp://pgp.mit.edu 1EB2638FF56C0C53"
	   aui_download_packages "cower pacaur"
     pacman -D --asdeps cower
     if ! is_package_installed "pacaur" ; then
        echo "Pacaur not installed. EXIT now"
        pause_function
        exit 0
     fi
  fi
  AUR_PKG_MANAGER="pacaur"
  pause_function
}
#}}}
#CUSTOM REPOSITORIES {{{
add_custom_repositories(){
  print_title "CUSTOM REPOSITORIES - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
  read_input_text "Add custom repositories" $CUSTOMREPO
  if [[ $OPTION == y ]]; then
    while true
    do
      print_title "CUSTOM REPOSITORIES - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
      echo " 1) \"Add new repository\""
	    echo ""
	    echo " 2) \"Add ArchlinuxCN Repository\""
      echo ""
      echo " 3) \"Add ArchlinuxCN(USTC) Repository\""
      echo ""
      echo " d) DONE"
      echo ""
      read -p "$prompt1" OPTION
      case $OPTION in
        1)
            read -p "Repository Name [ex: custom]: " repository_name
            read -p "Repository Address [ex: file:///media/backup/Archlinux]: " repository_addr
            add_repository "${repository_name}" "${repository_addr}" "Never"
            pause_function
            ;;
		    2)
		        add_repository "archlinuxcn" "http://repo.archlinuxcn.org/\$arch" "Optional TrustedOnly"
		        pacman -S archlinuxcn-keyring
		        pause_function
		        ;;
        3)
            add_repository "archlinuxcn" "https://mirrors.ustc.edu.cn/archlinuxcn/\$arch" "Never"
            pacman -S archlinuxcn-keyring
            pause_function
            ;;
        "d")
            break
            ;;
        *)
            invalid_option
            ;;
      esac
    done
  fi
}
#}}}
#BASIC SETUP {{{
install_basic_setup(){
  #BASH工具
  print_title "BASH TOOLS - https://wiki.archlinux.org/index.php/Bash"
  # bc命令是一种支持任意精度的交互执行的计算器语言
  # 远程数据同步工具
  # mlocate 是locate 的新实现，是一款根据文件名查找文件系统中文件的工具
  # Arch配置信息收集工具，用于帮助Arch，可不安装
  # 针对不方便上网，或缺乏图形化的网络浏览器的用户而设计，提供了尽可能极佳的体验
  # package_install "bc rsync mlocate bash-completion pkgstats arch-wiki-lite"
  package_install "mlocate bash-completion"
  #pause_function

  #压缩工具
  package_install "zip unzip unrar p7zip lzop cpio"
  #pause_function

  #Avahi是一个零配置的网络服务发现的实现
  package_install "avahi nss-mdns"
  is_package_installed "avahi" && system_ctl enable avahi-daemon

  #选用pulseaudio+alsa的好处和坏处,好处就是解决混音和声卡独占问题,缺点就是有些软件(极其个别)还不支持
  #ALSA(高级Linux声音体系)是为声卡提供驱动的Linux内核组件,以替代原先的OSS(开放声音系统)
  package_install "alsa-utils alsa-plugins"
  #pause_function
  #PulseAudio是声音服务器,简单说,软件要发声就先发消息给声音服务器,然后声音服务器经过处理(主要是多条音频流的混音),然后发给驱动控制声音设备发出声音.
  package_install "pulseaudio pulseaudio-alsa"
  #pause_function

  #文件系统支持
  package_install "ntfs-3g dosfstools exfat-utils f2fs-tools fuse fuse-exfat autofs mtpfs"
  pause_function
}
#}}}
#SSH {{{
install_ssh(){
  print_title "SSH - https://wiki.archlinux.org/index.php/Ssh"
  print_info "Secure Shell (SSH) is a network protocol that allows data to be exchanged over a secure channel between two computers."
  read_input_text "Install ssh" $SSH
  if [[ $OPTION == y ]]; then
    package_install "openssh"
    system_ctl enable sshd
    [[ ! -f /etc/ssh/sshd_config.aui ]] && cp -v /etc/ssh/sshd_config /etc/ssh/sshd_config.aui;
    #CONFIGURE SSHD_CONF #{{{
      sed -i '/Port 22/s/^#//' /etc/ssh/sshd_config
      sed -i '/Protocol 2/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_rsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_dsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_ecdsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/KeyRegenerationInterval/s/^#//' /etc/ssh/sshd_config
      sed -i '/ServerKeyBits/s/^#//' /etc/ssh/sshd_config
      sed -i '/SyslogFacility/s/^#//' /etc/ssh/sshd_config
      sed -i '/LogLevel/s/^#//' /etc/ssh/sshd_config
      sed -i '/LoginGraceTime/s/^#//' /etc/ssh/sshd_config
      sed -i '/PermitRootLogin/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostbasedAuthentication no/s/^#//' /etc/ssh/sshd_config
      sed -i '/StrictModes/s/^#//' /etc/ssh/sshd_config
      sed -i '/RSAAuthentication/s/^#//' /etc/ssh/sshd_config
      sed -i '/PubkeyAuthentication/s/^#//' /etc/ssh/sshd_config
      sed -i '/IgnoreRhosts/s/^#//' /etc/ssh/sshd_config
      sed -i '/PermitEmptyPasswords/s/^#//' /etc/ssh/sshd_config
      sed -i '/AllowTcpForwarding/s/^#//' /etc/ssh/sshd_config
      sed -i '/AllowTcpForwarding no/d' /etc/ssh/sshd_config
      sed -i '/X11Forwarding/s/^#//' /etc/ssh/sshd_config
      sed -i '/X11Forwarding/s/no/yes/' /etc/ssh/sshd_config
      sed -i -e '/\tX11Forwarding yes/d' /etc/ssh/sshd_config
      sed -i '/X11DisplayOffset/s/^#//' /etc/ssh/sshd_config
      sed -i '/X11UseLocalhost/s/^#//' /etc/ssh/sshd_config
      sed -i '/PrintMotd/s/^#//' /etc/ssh/sshd_config
      sed -i '/PrintMotd/s/yes/no/' /etc/ssh/sshd_config
      sed -i '/PrintLastLog/s/^#//' /etc/ssh/sshd_config
      sed -i '/TCPKeepAlive/s/^#//' /etc/ssh/sshd_config
      sed -i '/the setting of/s/^/#/' /etc/ssh/sshd_config
      sed -i '/RhostsRSAAuthentication and HostbasedAuthentication/s/^/#/' /etc/ssh/sshd_config
    #}}}
    pause_function
  fi
}
#}}}
#NFS {{{
install_nfs(){
  print_title "NFS - https://wiki.archlinux.org/index.php/Nfs"
  print_info "NFS allowing a user on a client computer to access files over a network in a manner similar to how local storage is accessed."
  read_input_text "Install nfs" $NFS
  if [[ $OPTION == y ]]; then
    package_install "nfs-utils"
    system_ctl enable rpcbind
    system_ctl enable nfs-client.target
    system_ctl enable remote-fs.target
    pause_function
  fi
}
#}}}
#ZSH {{{
install_zsh(){
  print_title "ZSH - https://wiki.archlinux.org/index.php/Zsh"
  print_info "Zsh is a powerful shell that operates as both an interactive shell and as a scripting language interpreter. "
  read_input_text "Install zsh" $ZSH
  if [[ $OPTION == y ]]; then
    package_install "zsh"
    read_input_text "Install oh-my-zsh" $OH_MY_ZSH
    if [[ $OPTION == y ]]; then
      if [[ -f /home/${username}/.zshrc ]]; then
        read_input_text "Replace current .zshrc file"
        if [[ $OPTION == y ]]; then
          run_as_user "mv /home/${username}/.zshrc /home/${username}/.zshrc.bkp"
          run_as_user "sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\""
          run_as_user "$EDITOR /home/${username}/.zshrc"
        fi
      else
        run_as_user "sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\""
        run_as_user "$EDITOR /home/${username}/.zshrc"
      fi
    fi
    pause_function
  fi
}
#}}}
#SAMBA {{{
install_samba(){
  print_title "SAMBA - https://wiki.archlinux.org/index.php/Samba"
  print_info "Samba is a re-implementation of the SMB/CIFS networking protocol, it facilitates file and printer sharing among Linux and Windows systems as an alternative to NFS."
  read_input_text "Install Samba" $SAMBA
  if [[ $OPTION == y ]]; then
    package_install "samba smbnetfs"
    [[ ! -f /etc/samba/smb.conf ]] && cp /etc/samba/smb.conf.default /etc/samba/smb.conf
    local CONFIG_SAMBA=`cat /etc/samba/smb.conf | grep usershare`
    if [[ -z $CONFIG_SAMBA ]]; then
      # configure usershare
      export USERSHARES_DIR="/var/lib/samba/usershare"
      export USERSHARES_GROUP="sambashare"
      mkdir -p ${USERSHARES_DIR}
      groupadd ${USERSHARES_GROUP}
      chown root:${USERSHARES_GROUP} ${USERSHARES_DIR}
      chmod 1770 ${USERSHARES_DIR}
      sed -i -e '/\[global\]/a\\n   usershare path = /var/lib/samba/usershare\n   usershare max shares = 100\n   usershare allow guests = yes\n   usershare owner only = False' /etc/samba/smb.conf
      sed -i -e '/\[global\]/a\\n   socket options = IPTOS_LOWDELAY TCP_NODELAY SO_KEEPALIVE\n   write cache size = 2097152\n   use sendfile = yes\n' /etc/samba/smb.conf
      usermod -a -G ${USERSHARES_GROUP} ${username}
      sed -i '/user_allow_other/s/^#//' /etc/fuse.conf
      modprobe fuse
    fi
    echo "Enter your new samba account password:"
    pdbedit -a -u ${username}
    while [[ $? -ne 0 ]]; do
      pdbedit -a -u ${username}
    done
    # enable services
    system_ctl enable smbd
    system_ctl enable nmbd
    pause_function
  fi
}
#}}}
#READAHEAD {{{
enable_readahead(){
  print_title "Readahead - https://wiki.archlinux.org/index.php/Improve_Boot_Performance"
  print_info "Systemd comes with its own readahead implementation, this should in principle improve boot time. However, depending on your kernel version and the type of your hard drive, your mileage may vary (i.e. it might be slower)."
  read_input_text "Enable Readahead" $READAHEAD
  if [[ $OPTION == y ]]; then
    system_ctl enable systemd-readahead-collect
    system_ctl enable systemd-readahead-replay
    pause_function
  fi
}
#}}}
#ZRAM {{{
install_zram (){
  print_title "ZRAM - https://wiki.archlinux.org/index.php/Maximizing_Performance"
  print_info "Zram creates a device in RAM and compresses it. If you use for swap means that part of the RAM can hold much more information but uses more CPU. Still, it is much quicker than swapping to a hard drive. If a system often falls back to swap, this could improve responsiveness. Zram is in mainline staging (therefore its not stable yet, use with caution)."
  read_input_text "Install Zram" $ZRAM
  if [[ $OPTION == y ]]; then
    aur_package_install "zramswap"
    system_ctl enable zramswap
    pause_function
  fi
}
#}}}
#TLP {{{
install_tlp(){
  print_title "TLP - https://wiki.archlinux.org/index.php/Tlp"
  print_info "TLP is an advanced power management tool for Linux. It is a pure command line tool with automated background tasks and does not contain a GUI."
  read_input_text "Install TLP" $TLP
  if [[ $OPTION == y ]]; then
    package_install "tlp"
    system_ctl enable tlp
    system_ctl enable tlp-sleep
    system_ctl disable systemd-rfkill
    tlp start
    pause_function
  fi
}
#}}}
#XORG {{{
install_xorg(){
  print_title "XORG - https://wiki.archlinux.org/index.php/Xorg"
  print_info "Xorg is the public, open-source implementation of the X window system version 11."
  echo "Installing X-Server (req. for Desktopenvironment, GPU Drivers, Keyboardlayout,...)"
  package_install "xorg-server xorg-apps xorg-server-xwayland xorg-xinit xorg-xkill xorg-xinput xf86-input-libinput"
  package_install "mesa"
  modprobe uinput
  pause_function
}
#}}}
#FONT CONFIGURATION {{{
font_config(){
  print_title "FONTS CONFIGURATION - https://wiki.archlinux.org/index.php/Font_Configuration"
  print_info "Fontconfig is a library designed to provide a list of available fonts to applications, and also for configuration for how fonts get rendered."
  read_input_text "Install Fontconfig" $FONTCONFIG
  if [[ $OPTION == y ]]; then
    pacman -S --asdeps --needed cairo fontconfig freetype2
    pause_function
  fi
}
#}}}
#VIDEO CARDS {{{
install_video_cards(){
  package_install "dmidecode"
  print_title "VIDEO CARD"
  check_vga
  #Virtualbox {{{
  if [[ ${VIDEO_DRIVER} == virtualbox ]]; then
    # 觉得这个有些问题，使用自己定义的方式直接安装驱动即可
    package_install "virtualbox-guest-modules-arch virtualbox-guest-utils mesa-libgl xf86-video-vesa"
    add_module "vboxguest vboxsf vboxvideo" "virtualbox-guest"
    add_user_to_group ${username} vboxsf
    system_ctl disable ntpd
    system_ctl enable vboxservice
	#pacman -S --noconfirm xf86-video-vesa
  #}}}
  #VMware {{{
  elif [[ ${VIDEO_DRIVER} == vmware ]]; then
    package_install "xf86-video-vmware xf86-input-vmmouse open-vm-tools"
    cat /proc/version > /etc/arch-release
    system_ctl disable ntpd
    system_ctl enable vmtoolsd
  #}}}
  #Bumblebee {{{
  elif [[ ${VIDEO_DRIVER} == bumblebee ]]; then
    XF86_DRIVERS=$(pacman -Qe | grep xf86-video | awk '{print $1}')
    [[ -n $XF86_DRIVERS ]] && pacman -Rcsn $XF86_DRIVERS
    pacman -S --needed xf86-video-intel bumblebee nvidia
    [[ ${ARCHI} == x86_64 ]] && pacman -S --needed lib32-virtualgl lib32-nvidia-utils
    replace_line '*options nouveau modeset=1' '#options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '*MODULES="nouveau"' '#MODULES="nouveau"' /etc/mkinitcpio.conf
    mkinitcpio -p linux
    add_user_to_group ${username} bumblebee
  #}}}
  #NVIDIA {{{
  elif [[ ${VIDEO_DRIVER} == nvidia ]]; then
    XF86_DRIVERS=$(pacman -Qe | grep xf86-video | awk '{print $1}')
    [[ -n $XF86_DRIVERS ]] && pacman -Rcsn $XF86_DRIVERS
    pacman -S --needed nvidia{,-utils}
    [[ ${ARCHI} == x86_64 ]] && pacman -S --needed lib32-nvidia-utils
    replace_line '*options nouveau modeset=1' '#options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '*MODULES="nouveau"' '#MODULES="nouveau"' /etc/mkinitcpio.conf
    mkinitcpio -p linux
    nvidia-xconfig --add-argb-glx-visuals --allow-glx-with-composite --composite -no-logo --render-accel -o /etc/X11/xorg.conf.d/20-nvidia.conf;
  #}}}
  #Nouveau [NVIDIA] {{{
  elif [[ ${VIDEO_DRIVER} == nouveau ]]; then
    is_package_installed "nvidia" && pacman -Rdds --noconfirm nvidia{,-utils}
    [[ ${ARCHI} == x86_64 ]] && is_package_installed "lib32-nvidia-utils" && pacman -Rdds --noconfirm lib32-nvidia-utils
    [[ -f /etc/X11/xorg.conf.d/20-nvidia.conf ]] && rm /etc/X11/xorg.conf.d/20-nvidia.conf
    package_install "xf86-video-${VIDEO_DRIVER} mesa-libgl libvdpau-va-gl"
    replace_line '#*options nouveau modeset=1' 'options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '#*MODULES="nouveau"' 'MODULES="nouveau"' /etc/mkinitcpio.conf
    mkinitcpio -p linux
  #}}}
  #ATI {{{
  elif [[ ${VIDEO_DRIVER} == ati ]]; then
    is_package_installed "catalyst-total" && pacman -Rdds --noconfirm catalyst-total
    [[ -f /etc/X11/xorg.conf.d/20-radeon.conf ]] && rm /etc/X11/xorg.conf.d/20-radeon.conf
    [[ -f /etc/modules-load.d/catalyst.conf ]] && rm /etc/modules-load.d/catalyst.conf
    [[ -f /etc/X11/xorg.conf ]] && rm /etc/X11/xorg.conf
    package_install "xf86-video-${VIDEO_DRIVER} mesa-libgl mesa-vdpau libvdpau-va-gl"
    add_module "radeon" "ati"
  #}}}
  #Intel {{{
  elif [[ ${VIDEO_DRIVER} == intel ]]; then
    package_install "xf86-video-${VIDEO_DRIVER} mesa-libgl libvdpau-va-gl"
  #}}}
  #Vesa {{{
  else
    package_install "xf86-video-${VIDEO_DRIVER} mesa-libgl libvdpau-va-gl"
  fi
  #}}}
  if [[ ${ARCHI} == x86_64 ]]; then
    is_package_installed "mesa-libgl" && package_install "lib32-mesa-libgl"
    is_package_installed "mesa-vdpau" && package_install "lib32-mesa-vdpau"
  fi
  if is_package_installed "libvdpau-va-gl"; then
    add_line "export VDPAU_DRIVER=va_gl" "/etc/profile"
  fi
  pause_function
}
#}}}
#CUPS {{{
install_cups(){
  print_title "CUPS - https://wiki.archlinux.org/index.php/Cups"
  print_info "CUPS is the standards-based, open source printing system developed by Apple Inc. for Mac OS X and other UNIX-like operating systems."
  read_input_text "Install CUPS (aka Common Unix Printing System)" $CUPS
  if [[ $OPTION == y ]]; then
    package_install "cups cups-filters ghostscript gsfonts"
    package_install "gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters foomatic-db-ppds foomatic-db-nonfree-ppds hplip splix cups-pdf foomatic-db-gutenprint-ppds"
    system_ctl enable org.cups.cupsd.service
    pause_function
  fi
}
#}}}
#ADDITIONAL FIRMWARE {{{
install_additional_firmwares(){
  print_title "INSTALL ADDITIONAL FIRMWARES"
  read_input_text "Install additional firmwares [Audio,Bluetooth,Scanner,Wireless]" $FIRMWARE
  if [[ $OPTION == y ]]; then
    while true
    do
      print_title "INSTALL ADDITIONAL FIRMWARES"
      echo " 1) $(menu_item "aic94xx-firmware") $AUR"
      echo " 2) $(menu_item "alsa-firmware")"
      echo " 3) $(menu_item "b43-firmware") $AUR"
      echo " 4) $(menu_item "b43-firmware-legacy") $AUR"
      echo " 5) $(menu_item "bfa-firmware") $AUR"
      echo " 6) $(menu_item "bluez-firmware") [Broadcom BCM203x/STLC2300 Bluetooth]"
      echo " 7) $(menu_item "broadcom-wl") $AUR"
      echo " 8) $(menu_item "ipw2100-fw")"
      echo " 9) $(menu_item "ipw2200-fw")"
      echo "10) $(menu_item "libffado") [Fireware Audio Devices]"
      echo "11) $(menu_item "libmtp") [Android Devices]"
      echo "12) $(menu_item "libraw1394") [IEEE1394 Driver]"
      echo ""
      echo " d) DONE"
      echo ""
      FIRMWARE_OPTIONS+=" d"
      read_input_options "$FIRMWARE_OPTIONS"
      for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
          1)
            aur_package_install "aic94xx-firmware"
            ;;
          2)
            package_install "alsa-firmware"
            ;;
          3)
            aur_package_install "b43-firmware"
            ;;
          4)
            aur_package_install "b43-firmware-legacy"
            ;;
          5)
            aur_package_install "bfa-firmware"
            ;;
          6)
            package_install "bluez-firmware"
            ;;
          7)
            aur_package_install "broadcom-wl"
            ;;
          8)
            package_install "ipw2100-fw"
            ;;
          9)
            package_install "ipw2200-fw"
            ;;
          10)
            package_install "libffado"
            ;;
          11)
            package_install "libmtp"
            aur_package_install "android-udev"
            ;;
          12)
            package_install "libraw1394"
            ;;
          "d")
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      source sharedfuncs_elihw
    done
  fi
}
#}}}
#DESKTOP ENVIRONMENT {{{
install_desktop_environment(){
    install_misc_apps(){
        ### 轻快优雅的图像查看器
        # package_install "viewnior"
        ### (Gnome Completion-Run) is an lightweight application launcher
        # package_install "gmrun"
        ### 终端
        # package_install "rxvt-unicode"
        ###
        # aur_package_install "squeeze-git"
        ### 文件管理器
        # package_install "thunar tumbler"
        ### 简洁轻量的面板/任务栏
        # package_install "tint2"
        ### 一个简单的CD/DVD刻录工具
        # package_install "xfburn"
        ### xcompmgr实现窗口阴影,淡入淡出效果
        # package_install "xcompmgr transset-df"
        ### 超级好用的pdf阅读器
        # package_install "zathura"
        ### 命令行下测试服务器外网速度
        # aur_package_install "speedtest-cli"
        ### 另一个终端，比xterm和urxvt配置简单，并且依赖少小巧，自带透明效果
		    # package_install "lxterminal"

    }
    config_i3_xinitrc() { #{{{
        #create a xinitrc file in home user directory
        cp -fv /etc/X11/xinit/xinitrc /home/${username}/.xinitrc
        # 代替.xinitrc配置文件中的默认桌面配置，使用自定义设置
        # 这里设置在桌面环境时使用中文locale
        sed -i 's/^twm &/export LANG=zh_CN.UTF-8/g' /home/${username}/.xinitrc
	      sed -i 's/^xclock -geometry 50x50-1+1 &/export LANGUAGE=zh_CN:en_US/g' /home/${username}/.xinitrc
	      sed -i 's/^xterm -geometry 80x50+494+51 &/export LC_CTYPE=en_US.UTF-8/g' /home/${username}/.xinitrc
        # fcitx输入法设置
	      sed -i 's/^xterm -geometry 80x20+494-0 &/export GTK_IM_MODULE=fcitx/g' /home/${username}/.xinitrc
	      sed -i 's/^exec xterm -geometry 80x66+0+0 -name login/export QT_IM_MODULE=fcitx/g' /home/${username}/.xinitrc
        echo -e 'export XMODIFIERS="@im=fcitx"' >> /home/${username}/.xinitrc
        # 启动桌面环境
        echo -e "exec i3" >> /home/${username}/.xinitrc
        # 设置用户权限
        chown -R ${username}:users /home/${username}/.xinitrc
    } #}}}

    #I3 {{{
    # package_install "i3"
    # 使用i3-gaps代替i3，主要是可以透明底部bar，简单
    aur_package_install "i3-gaps"
    # config xinitrc
    config_i3_xinitrc
    ### 安装必备的：dmenu/rofi 应用程序启动器；compton-透明效果；xterm-默认终端；feh-壁纸管理；volwheel-声音管理
    package_install "dmenu rofi compton xterm feh volwheel"
    aur_package_install "polybar-git"
    # 拷贝配置文件到i3目录
    pause_function
    install_misc_apps "i3"
    #}}}


    ### 不懂，暂时先注释掉
  #COMMON CONFIG {{{
    # speed up application startup
    # mkdir -p ~/.compose-cache
    # D-Bus interface for user account query and manipulation
    # system_ctl enable accounts-daemon
    # Improvements
    # add_line "fs.inotify.max_user_watches = 524288" "/etc/sysctl.d/99-sysctl.conf"
  #}}}
}
#}}}
#CONNMAN/NETWORKMANAGER/WICD {{{
install_nm_wicd(){
  print_title "NETWORK MANAGER"
  echo " 1) Networkmanager"
  echo " 2) Wicd"
  echo " 3) ConnMan"
  echo ""
  echo " n) NONE"
  echo ""
  read_input $NETWORKMANAGER
  case "$OPTION" in
    1)
      print_title "NETWORKMANAGER - https://wiki.archlinux.org/index.php/Networkmanager"
      print_info "NetworkManager is a program for providing detection and configuration for systems to automatically connect to network. NetworkManager's functionality can be useful for both wireless and wired networks."
      if [[ ${KDE} -eq 1 ]]; then
        package_install "networkmanager dnsmasq plasma-nm networkmanager-qt"
      else
        package_install "networkmanager dnsmasq network-manager-applet nm-connection-editor gnome-keyring"
      fi
      # vpn support
      package_install "networkmanager-openconnect networkmanager-openvpn networkmanager-pptp networkmanager-vpnc"
      # auto update datetime from network
      if is_package_installed "ntp"; then
        package_install "networkmanager-dispatcher-ntpd"
        system_ctl enable NetworkManager-dispatcher.service
      fi
      # power manager support
      is_package_installed "tlp" && package_install "tlp-rdw"
      # network management daemon
      system_ctl enable NetworkManager.service
      pause_function
      ;;
    2)
      print_title "WICD - https://wiki.archlinux.org/index.php/Wicd"
      print_info "Wicd is a network connection manager that can manage wireless and wired interfaces, similar and an alternative to NetworkManager."
      if [[ ${KDE} -eq 1 ]]; then
        aur_package_install "wicd wicd-kde"
      else
        package_install "wicd wicd-gtk"
      fi
      # WICD daemon
      system_ctl enable wicd
      pause_function
      ;;
    3)
      print_title "CONNMAN - https://wiki.archlinux.org/index.php/Connman"
      print_info "ConnMan is an alternative to NetworkManager and Wicd and was created by Intel and the Moblin project for use with embedded devices."
      package_install "connman"
      # ConnMan daemon
      system_ctl enable connman
      pause_function
      ;;
  esac
}
#}}}
#USB 3G MODEM {{{
install_usb_modem(){
  print_title "USB 3G MODEM - https://wiki.archlinux.org/index.php/USB_3G_Modem"
  print_info "A number of mobile telephone networks around the world offer mobile internet connections over UMTS (or EDGE or GSM) using a portable USB modem device."
  read_input_text "Install usb 3G modem support" $USBMODEM
  if [[ $OPTION == y ]]; then
    package_install "usbutils usb_modeswitch"
    if is_package_installed "networkmanager"; then
      package_install "modemmanager"
      [[ ${KDE} -eq 1 ]] && package_install "modemmanager-qt"
      system_ctl enable ModemManager.service
    else
      package_install "wvdial"
    fi
    pause_function
  fi
}
#}}}
#ACCESSORIES {{{
install_accessories_apps(){
    print_title "ACCESSORIES APPS"
    ### Ubuntu下Linux桌面超轻量级搜索软件
    # package_install "catfish"
    ### 轻量的系统监视器，可以在你桌面显示任何类型的信息，这个可以用lua进行配置
    # aur_package_install "conky-lua"
    # package_install "lm_sensors"
    # sensors-detect --auto
    ### Docky是从GNOME Do项目剥离出来的一个Dock软件,让打开常用应用和管理窗口变得更加简单和快速
    # package_install "docky"
    # aur_package_install "dockmanager"
    ### 科学计算器
    # package_install "galculator"
    ### pamac是pacman的一个图形化前端
    # aur_package_install "pamac-aur"
    ### 实用的文件批量改名工具
    # aur_package_install "pyrenamer"
    ### 安全地管理你的密码和重要信息，让你的生活更轻松
    # aur_package_install "enpass-bin"
    ### Shutter 基于 Linux 的系统上（比如 Ubuntu）的一款功能丰富的截屏软件
    # aur_package_install "shutter"
    ### Linux 上最好的应用启动器
    # package_install "synapse"
    # aur_package_install "tilix-bin"
    ### Linux 上最强大的终端模拟器是功能丰富的 Terminator（终结者）
    # package_install "terminator"
    ### 电脑遥控器
    # aur_package_install "unified-remote-server"
    # system_ctl enable urserver
    ### 终端显示系统信息的小工具
    # package_install "neofetch"
    ###
    # package_install "screenfetch"
}
#}}}
#DEVELOPEMENT {{{
install_development_apps(){
    print_title "DEVELOPMENT APPS"
    # package_remove "vim"
    # package_install "emacs"
    # package_install "atom"
    # package_install "gvim ctags"
    # package_install "meld"
    # aur_package_install "sublime-text"
    # aur_package_install "sublime-text-dev"
    ### {{{ android-sdk
    # aur_package_install "android-sdk android-sdk-platform-tools android-sdk-build-tools android-platform"
    # add_user_to_group ${username} sdkusers
    # chown -R :sdkusers /opt/android-sdk/
    # chmod -R g+w /opt/android-sdk/
    # add_line "export ANDROID_HOME=/opt/android-sdk" "/home/${username}/.bashrc"
    # aur_package_install "android-studio"
    ### }}}
    # package_install "intellij-idea-community-edition"
    # package_install "monodevelop monodevelop-debugger-gdb"
    # package_install "qtcreator"
    # aur_package_install "mysql-workbench-gpl"
    ### {{{
    # package_remove "jdk"
    # package_install "jdk8-openjdk icedtea-web"
    ### }}}
    ### {{{
    # package_remove "jre{7,8}-openjdk"
    # package_remove "jdk{7,8}-openjdk"
    # aur_package_install "jdk"
    ### }}}
    # package_install "nodejs"
    # aur_package_install "visual-studio-code"
}
#}}}
#OFFICE {{{
# 需要再次进行筛选,考虑不再安装时进行选择，需要时再进行选择
install_office_apps(){
    print_title "OFFICE APPS"
    ### 安装办公套件
    #package_install "gnumeric abiword abiword-plugins" #免费开源的电子表格处理软件，是Gnome的一部分
    #package_install "hunspell hunspell-$LOCALE_HS"     #拼写检查器
    #package_install "aspell aspell-$LOCALE_AS"         #拼写检查器
    ### Calibre是一款电子书管理软件,其提供的“一站式”的电子书解决方案,不仅可以用它对图书进行格式转换,还可以将文本图像材料、在线内容(RSS)加入并转换为电子书。
    #package_install "calibre"
    ### GCstar是一个用于管理用户的收藏品(如:电影、游戏等)的应用程序。
    #package_install "gcstar"
    ### Geeknote是一款以命令行形式操作的极客版Evernote客户端
    #aur_package_install "geeknote-git"
    ### Haroopad是一款非常强大的markdown编辑器,它内置的很多mardown扩展都是为了方便程序员,避免了大家到处寻找插件自行配制的繁琐
    #aur_package_install "haroopad"
    ### 一个免费的个人财务会计软件
    #package_install "homebank"
    ### Impressive是一个PDF或图片演示工具
    #package_install "impressive"
    ### 安装和运行TeX文档制作系统的简单方式
    #package_install "texlive-most"
    #package_install "gummi"
    ### 一款由社区创造的自由免费办公套件
    #print_title "LIBREOFFICE - https://wiki.archlinux.org/index.php/LibreOffice"
    #package_install "libreoffice-fresh"
    #package_install "libreoffice-fresh-zh-cn"
    #package_install "hunspell hunspell-zh-cn"
    #package_install "aspell aspell-zh-cn"
    ### OCR软件，将图像转变为文字
    #package_install "ocrfeeder tesseract gocr"
    #package_install "aspell aspell-zh-cn"
    ### 实用的思维导图软件
    #package_install "xmind"
}
#}}}
#SYSTEM TOOLS {{{
install_system_apps(){
    print_title "SYSTEM TOOLS APPS"
    ###Clam 防病毒
    # package_install "clamav"
    # cp /etc/clamav/clamd.conf.sample /etc/clamav/clamd.conf
    # cp /etc/clamav/freshclam.conf.sample /etc/clamav/freshclam.conf
    # sed -i '/Example/d' /etc/clamav/freshclam.conf
    # sed -i '/Example/d' /etc/clamav/clamd.conf
    # system_ctl enable clamd
    # freshclam
    ### Cockpit 是一个自由开源的服务器管理软件,它使得我们可以通过它好看的 web 前端界面轻松地管理我们的 GNU/Linux 服务器
    # aur_package_install "cockpit storaged linux-user-chroot ostree"
    ### Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化
    # package_install "docker"
    # add_user_to_group ${username} docker
    ### firewalld 是新一 Linux 代防火墙工具,它提供了支持网络 / 防火墙区域 (zone) 定义网络链接以及接口安全等级的动态防火墙管理工具
    # is_package_installed "ufw" && package_remove "ufw"
    # is_package_installed "firewalld" && package_remove "firewalld"
    # package_install "firewalld"
    # system_ctl enable firewalld
    ### Ubuntu/Linux 磁盘分区工具
    # package_install "gparted"
    ### rsync图形界面
    # package_install "grsync"
    ### 自动更新Hosts的一个脚本
    # aur_package_install "hosts-update"
    # hosts-update
    ### 带有改进的特性和用户体验的top
    # package_install "htop"
    ### 家庭媒体中心
    # aur_package_install "plex-media-server"
    # system_ctl enable plexmediaserver.service
    ### Ubuntu的防火墙
    # print_title "UFW - https://wiki.archlinux.org/index.php/Ufw"
    # print_info "Ufw stands for Uncomplicated Firewall, and is a program for managing a netfilter firewall. It provides a command line interface and aims to be uncomplicated and easy to use."
    # is_package_installed "firewalld" && package_remove "firewalld"
    # aur_package_install "ufw gufw"
    # system_ctl enable ufw.service
    ### 手机远程控制电脑
    # aur_package_install "unified-remote-server"
    # system_ctl enable urserver.service
    ### 虚拟机
    #Make sure we are not a VirtualBox Guest
    # VIRTUALBOX_GUEST=`dmidecode --type 1 | grep VirtualBox`
    # if [[ -z ${VIRTUALBOX_GUEST} ]]; then
    #    package_install "virtualbox virtualbox-host-dkms virtualbox-guest-iso linux-headers"
    #    aur_package_install "virtualbox-ext-oracle"
    #    add_user_to_group ${username} vboxusers
    #    modprobe vboxdrv vboxnetflt
    # else
    #    cecho "${BBlue}[${Reset}${Bold}!${BBlue}]${Reset} VirtualBox was not installed as we are a VirtualBox guest."
    # fi
    ### 是一个能够在多种 POSIX-compliant 操作系统（诸如 Linux，Mac OSX 及 BSD 等）上运行 Windows 应用的兼容层
    # package_install "icoutils wine wine_gecko wine-mono winetricks"
    ### Linux服务器监控的神器
    # package_install "netdata"
    # system_ctl enable netdata.service
    ### linux网络流量实时监控工具之nload
    # package_install "nload"
    ### 输入法fcitx
		package_install "fcitx-im fcitx-configtool fcitx-sogoupinyin"

    #source sharedfuncs_elihw
}
#}}}
#GRAPHICS {{{
install_graphics_apps(){
    print_title "GRAPHICS APPS"
    ### 一款开源的跨平台全能三维动画制作软件
    # package_install "blender"
    ### 跨平台的图像处理程序，号称Linux下的PhotoShop
    # package_install "gimp"
    # ### GNOME桌面环境下的开源图像浏览器
    # package_install "gthumb"
    ### 开源矢量图形编辑软件
    # package_install "inkscape python2-numpy python-lxml"
    ### 用户界面友好,可定制的漫画阅读器
    # package_install "mcomix"
    ### 免费开源的绘图工具
    # package_install "mypaint"
    ### 一款手绘风格原型图(界面)绘制工具
    # aur_package_install "pencil"
    ### 开源、图形桌面出版 (DTP) 工具,专注于布局、框架、样式、颜色管理和栏间文档流
    # package_install "scribus"
    ### 一款Linux下的相片管理软件，适用于GNOME桌面环境
    # package_install "shotwell"
    ### 扫描仪
    # package_install "simple-scan"
}
#}}}
#INTERNET {{{
install_internet_apps(){
    print_title "INTERNET APPS"

    ### Browsers
    ### google chrome浏览器
    aur_package_install "google-chrome"
    ### 开源版本的chrome浏览器
    # package_install "chromium"
    ### firefox浏览器
    # package_install "firefox firefox-i18n-zh-cn"

    ### 网盘和下载工具
    ### AeroFS是自动同步文件的免费工
    # aur_package_install "aerofs"
    ###
    # aur_package_install "rslsync"
    ### 一个功能齐全的跨平台BitTorrent 客户端软件
    # package_install "deluge"
    ### 网盘
    # aur_package_install "dropbox"
    ### 一个全功能,多线程,跨平台的下载管理器和加速器
    # aur_package_install "flareget"
    ### 网盘下载工具
    # aur_package_install "jdownloader"
    ### Ubuntu Linux中最受欢迎的P2P软件
    # package_install "qbittorrent"
    ### 一个共享开源代码的工具,它设计的目标就是让共享代码变得更加简单而不是你先前习惯的样子
    # package_install "sparkleshare"
    ### 一个数据备份，存储，供分享的软件
    # aur_package_install "spideroak"
    # ### Linux下的下载神器(类似迅雷)
    # package_install "uget"
    ### 一个基于python的小型命令行工具,可以从YouTube.com和几个更类似的网站下载视频
    # package_install "youtube-dl"
    ### 一款免费的易于使用的BT下载工具,它支持所有的BT种子,同等的文件传输能力,它还具有强大的带宽图表和节流能力
		# aur_package_install "tixati"

    #EMAIL {{{
    # print_title "EMAIL|RSS"
    ### Linux Feed Reader 的缩写,一个线上新闻聚合器
    # package_install "liferea"
    ### 邮件客户端
    # package_install "thunderbird"
    # package_install "thunderbird-i18n-zh-cn"

    # #IM|IRC {{{
    # print_title "IM - INSTANT MESSAGING"
    ### 一个IRC客户端
    # package_install "hexchat"
    ###
    # package_install "irssi"
    ###
    # package_install "pidgin"
    ###
    # aur_package_install "skype"
    ###
    # package_install "teamspeak3"
    ###
    # aur_package_install "viber"
    ###
    # aur_package_install "telegram-desktop-bin"
    ###
    # aur_package_install "qtox-git"
    ###
		# aur_package_install "discord"

    #MAPPING {{{
    # print_title "MAPPING TOOLS"
    ###
    # aur_package_install "google-earth"
    ###
    # aur_package_install "worldwind"

    #DESKTOP SHARE {{{
    # print_title "DESKTOP SHARE"
    ###
    # package_install "remmina"
    ###
    # aur_package_install "teamviewer"
}
#}}}
#AUDIO {{{
install_audio_apps(){
    print_title "AUDIO APPS"

    #PLAYERS {{{
    # print_title "AUDIO PLAYERS"
    # package_install "amarok"
    # package_install "audacious audacious-plugins"
    # aur_package_install "banshee"
    # package_install "clementine"
    # package_install "deadbeef"
    # aur_package_install "guayadeque"
    # aur_package_install "musique"
    # aur_package_install "nuvolaplayer"
    # package_install "pragha"
    # aur_package_install "radiotray"
    # package_install "rhythmbox grilo grilo-plugins libgpod libdmapsharing gnome-python python-mako"
    # aur_package_install "spotify"
    ###
    # aur_package_install "timidity++ fluidr3"
    # echo -e 'soundfont /usr/share/soundfonts/fluidr3/FluidR3GM.SF2' >> /etc/timidity++/timidity.cfg
    ###
    # aur_package_install "tomahawk"
    # package_install "quodlibet"

    #EDITORS {{{
    # print_title "AUDIO EDITORS|TOOLS"
    # package_install "audacity"
    # package_install "easytag"
    # aur_package_install "ocenaudio-bin"
    # package_install "soundconverter"

    #Codecs {{{}}}
    # package_install "gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav"
    ## Use the 'standard' preset by default. This preset should generally be
    ## transparent to most people on most music and is already quite high in quality.
    ## The resulting bitrate should be in the 170-210kbps range, according to music
    ## complexity.
    # run_as_user "gconftool-2 --type string --set /system/gstreamer/0.10/audio/profiles/mp3/pipeline \audio/x-raw-int,rate=44100,channels=2 ! lame name=enc preset=1001 ! id3v2mux\""
}
#}}}
#VIDEO {{{
install_video_apps(){
    print_title "VIDEO APPS"

    #PLAYERS {{{
    # print_title "VIDEO PLAYERS"
    # package_install "gnome-mplayer"
    # package_install "livestreamer"
    # package_install "minitube"
    # aur_package_install "miro"
    # package_install "mpv"
    # package_install "parole"
    # aur_package_install "popcorntime-ce"
    # package_install "vlc"
    ###
    # package_install "kodi"
    # add_user_to_group ${username} kodi

    #EDITORS {{{
    # print_title "VIDEO EDITORS|TOOLS"
    # aur_package_install "arista"
    # package_install "avidemux-gtk"
    # aur_package_install "filebot"
    # package_install "handbrake"
    # aur_package_install "kazam"
    # package_install "kdenlive"
    # aur_package_install "lwks"
    # package_install "openshot"
    # package_install "pitivi frei0r-plugins"
    # package_install "transmageddon"

    #Codecs {{{
    # package_install "libdvdnav libdvdcss cdrdao cdrtools ffmpeg ffmpeg2.8 ffmpegthumbnailer ffmpegthumbs"
}
#}}}
#GAMES {{{
install_games(){
    print_title "GAMES - https://wiki.archlinux.org/index.php/Games"
    # aur_package_install "desura"
    # aur_package_install "playonlinux"
    # package_install "steam"
	  # aur_package_install "minecraft"
}
#}}}
#WEBSERVER {{{
install_web_server(){
  install_mariadb(){ #{{{
    package_install "mariadb"
    /usr/bin/mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
    system_ctl enable mysqld.service
    systemctl start mysqld.service
    /usr/bin/mysql_secure_installation
  } #}}}
  install_postgresql(){ #{{{
    package_install "postgresql"
    mkdir -p /var/lib/postgres
    chown -R postgres:postgres /var/lib/postgres
    systemd-tmpfiles --create postgresql.conf
    echo "Enter your new postgres account password:"
    passwd postgres
    while [[ $? -ne 0 ]]; do
      passwd postgres
    done
    su - postgres -c "initdb --locale ${LOCALE}.UTF-8 -D /var/lib/postgres/data"
    system_ctl enable postgresql.service
    system_ctl start postgresql.service
    read_input_text "Install Postgis + Pgrouting" $POSTGIS
    [[ $OPTION == y ]] && install_gis_extension
  } #}}}
  configure_php(){ #{{{
    if [[ -f /etc/php/php.ini.pacnew ]]; then
      mv -v /etc/php/php.ini /etc/php/php.ini.pacold
      mv -v /etc/php/php.ini.pacnew /etc/php/php.ini
      rm -v /etc/php/php.ini.aui
    fi
    [[ -f /etc/php/php.ini.aui ]] && echo "/etc/php/php.ini.aui" || cp -v /etc/php/php.ini /etc/php/php.ini.aui
    if [[ $1 == mariadb ]]; then
      sed -i '/mysqli.so/s/^;//' /etc/php/php.ini
      sed -i '/mysql.so/s/^;//' /etc/php/php.ini
      sed -i '/skip-networking/s/^/#/' /etc/mysql/my.cnf
    else
      sed -i '/pgsql.so/s/^;//' /etc/php/php.ini
    fi
    sed -i '/mcrypt.so/s/^;//' /etc/php/php.ini
    sed -i '/gd.so/s/^;//' /etc/php/php.ini
    sed -i '/display_errors=/s/off/on/' /etc/php/php.ini
  } #}}}
  configure_php_nginx(){ #{{{
    if [[ -f /etc/nginx/nginx.conf.pacnew ]]; then
      mv -v /etc/nginx/nginx.conf.pacnew /etc/nginx/nginx.conf
      rm -v /etc/nginx/nginx.conf.aui
    fi
    [[ -f /etc/nginx/nginx.conf.aui ]] && cp -v /etc/nginx/nginx.conf.aui /etc/nginx/nginx.conf || cp -v /etc/nginx/nginx.conf /etc/nginx/nginx.conf.aui
    sed -i -e '/location ~ \.php$ {/,/}/d' /etc/nginx/nginx.conf
    sed -i -e '/pass the PHP/a\        #\n        location ~ \.php$ {\n            fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;\n            fastcgi_index  index.php;\n            root           /srv/http;\n            include        fastcgi.conf;\n        }' /etc/nginx/nginx.conf
  } #}}}

  # setup LEMP
  package_install "nginx php php-mcrypt php-fpm"
  install_mariadb
  system_ctl enable nginx.service
  system_ctl enable php-fpm.service
  configure_php_nginx
  configure_php "mariadb"
}
#}}}
#FONTS {{{
install_fonts(){
    # 应为字体使用Misc Fixed，感觉不错，中文字体使用Google的Noto
    # wqy-microhei - 文泉驿微米黑，无衬线形式字体
    # wqy-microhei-lite - 文泉驿微米黑light版（笔画更细）
    # package_install "wqy-microhei"         #中文字体
    # adobe-source-han-sans-otc-fonts - 思源黑体，无衬线字体
    # adobe-source-han-serif-otc-fonts - 思源宋体，衬线字体
    # adobe-source-han-sans-cn-fonts - 思源黑体简体中文部分
    # adobe-source-han-serif-cn-fonts - 思源宋体简体中文部分
    package_install "adobe-source-han-serif-cn-fonts"     #思源宋体
    #package_install "noto-fonts-cjk"         #中文字体
    #aur_package_install "noto-fonts-sc"      #中文字体，单独安装这个不好用，并且安装困难，放弃，这个和思源是一样的，直接使用思源宋体即可
    # icons字体
    #package_install "ttf-font-awesome"
}
#}}}
#CLEAN ORPHAN PACKAGES {{{
# 清除孤儿包
clean_orphan_packages(){
  print_title "CLEAN ORPHAN PACKAGES"
  pacman -Rsc --noconfirm $(pacman -Qqdt)
  #pacman -Sc --noconfirm
  pacman-optimize
}
#}}}
#FINISH {{{
finish(){
  print_title "WARNING: PACKAGES INSTALLED FROM AUR"
  print_danger "List of packages not officially supported that may kill your cat:"
  pause_function
  AUR_PKG_LIST="${AUI_DIR}/aur_pkg_list.log"
  pacman -Qm | awk '{print $1}' > $AUR_PKG_LIST
  less $AUR_PKG_LIST
  print_title "INSTALL COMPLETED"
  echo -e "Thanks for using the Archlinux Ultimate Install script by helmuthdu\n"
  #REBOOT
  read -p "Reboot your system [y/N]: " OPTION
  [[ $OPTION == y ]] && reboot
  exit 0
}
#}}}

welcome
check_root
check_archlinux
check_hostname
check_connection
check_pacman_blocked
check_multilib
pacman_key
system_update
configure_sudo
select_user
# 添加自定义仓库
add_custom_repositories
# 选择一个AUR帮助工具
choose_aurhelper

print_title "ARCHLINUX INSTALL - https://github.com/helmuthdu/aui"
print_warning "USERNAME: ${username}"
pause_function

#基础安装
install_basic_setup
install_tlp       #TLP是一款Linux流行的电源工具软件
# 安装显卡驱动
install_video_cards
# 安装桌面环境
install_xorg
# 安装字体
install_fonts
# 安装字体配置
#font_config
# 安装桌面环境
install_desktop_environment
# 安装常用应用
package_install "lantern"              #蓝灯，穿越长城
package_install "wiznote"              #为知笔记，多端笔记同步
aur_package_install "google-chrome"    #chrome浏览器
aur_package_install "wps-office"       #wps办公软件


# 安装通用打印系统
#install_cups
# 安装附件应用
#install_accessories_apps
# 安装开发工具
#install_development_apps
# 安装办公工具
#install_office_apps
# 安装系统应用
#install_system_apps
# 安装互联网应用
#install_internet_apps

# 安装可选固件
#install_additional_firmwares
# install_zsh
# install_ssh
# install_nfs     #NFS网络文件系统服务器
# install_samba   #Unix上实现SMB(Server Message Block)的一个工具套件,SMB通常是windows用来实现共享的，包括文件和打印机等。而Unix上装上SMB，则使得Unix能够和windows连接在一起，实现两者的资源互通。
#enable_readahead  #指Linux系统内核将指定文件的某区域预读进页缓存起来，便于接下来对该区域进行读取时，不会因缺页（page fault）而阻塞。预读可以有效的减少磁盘的寻道次数和应用程序的I/O等待时间，是改进磁盘读I/O性能的重要优化手段之一。
#install_zram      #压缩内存
# install_nm_wicd #网络管理
# install_usb_modem #3G网络支持
# 安装图形应用
# install_graphics_apps
# 安装音频应用
# install_audio_apps
# 安装视频应用
# install_video_apps
# 安装游戏
# install_games
# 安装web服务器
# install_web_server
# 安装补充软件
# install_extra
# 清除孤儿包
clean_orphan_packages

finish
#}}}
